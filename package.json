import express from 'express';
import http from 'http';
import WebSocket, { WebSocketServer } from 'ws';
import fetch from 'node-fetch';

const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

const PORT = process.env.PORT || 3000;

// Basit kullanıcı eşleştirme kuyruğu
const waitingUsers = new Map(); // { category: [ws1, ws2, ...] }

// Yapay zekâdan cevap alma (OpenAI API örneği)
async function aiReply(category, message) {
  const apiKey = process.env.OPENAI_API_KEY;
  const prompt = `Sen ${category} kategorisinde sohbet eden bir arkadaşsın. Kısa, samimi ve doğal cevap ver. Kullanıcı: ${message}`;

  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 150
      })
    });

    const data = await res.json();
    return data.choices?.[0]?.message?.content || "Üzgünüm, şu an cevap veremiyorum.";
  } catch (err) {
    console.error("AI error:", err);
    return "Bir hata oluştu.";
  }
}

// Yeni bağlantılar için handler
wss.on('connection', (ws) => {
  ws.on('message', async (raw) => {
    let msg;
    try {
      msg = JSON.parse(raw);
    } catch (e) {
      console.error("Invalid JSON:", raw);
      return;
    }

    if (msg.type === 'join') {
      ws.nickname = msg.nickname || "Anonim";
      ws.category = msg.category || "Genel Sohbet";

      // Eşleşme kuyruğu
      if (!waitingUsers.has(ws.category)) {
        waitingUsers.set(ws.category, []);
      }

      const queue = waitingUsers.get(ws.category);

      if (queue.length > 0) {
        // Bir kullanıcı bekliyorsa eşleştir
        const partner = queue.shift();
        ws.partner = partner;
        partner.partner = ws;

        ws.send(JSON.stringify({ type: 'system', text: `Eşleştin: ${partner.nickname}` }));
        partner.send(JSON.stringify({ type: 'system', text: `Eşleştin: ${ws.nickname}` }));
      } else {
        // Kuyruğa ekle
        queue.push(ws);
        ws.send(JSON.stringify({ type: 'system', text: "Bir eşleşme bekleniyor..." }));
      }
    }

    if (msg.type === 'message') {
      if (ws.partner && ws.partner.readyState === WebSocket.OPEN) {
        ws.partner.send(JSON.stringify({ type: 'message', from: ws.nickname, text: msg.text }));
      } else {
        // Partner yoksa yapay zekâdan cevap al
        const reply = await aiReply(ws.category, msg.text);
        ws.send(JSON.stringify({ type: 'message', from: 'AI', text: reply }));
      }
    }
  });

  ws.on('close', () => {
    // Kuyruktan çıkar
    if (ws.category && waitingUsers.has(ws.category)) {
      const queue = waitingUsers.get(ws.category);
      const index = queue.indexOf(ws);
      if (index !== -1) queue.splice(index, 1);
    }

    // Partneri bilgilendir
    if (ws.partner && ws.partner.readyState === WebSocket.OPEN) {
      ws.partner.send(JSON.stringify({ type: 'system', text: `${ws.nickname} sohbeti terk etti.` }));
      ws.partner.partner = null;
    }
  });
});

server.listen(PORT, () => {
  console.log(`Server çalışıyor: http://localhost:${PORT}`);
});
